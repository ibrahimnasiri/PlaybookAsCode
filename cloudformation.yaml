AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Template for a single-instance web service'
Parameters:
  AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
  EnvironmentType:
    Description: "Specify which env to run in"
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
  LatestAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  KeyName:
    Description: Name of an existing EC2 KeyPair for SSH
    Type: AWS::EC2::KeyPair::KeyName

Mappings:
  EnvironmentTypeToInstanceType:
    dev:
      InstanceType: t2.nano
    test:
      InstanceType: t2.micro
    prod:
      InstanceType: t2.small

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  Subnet10:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      VpcId: !Ref VPC
      CidrBlock: 10.0.10.0/24
      MapPublicIpOnLaunch: true
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
  Subnet10RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet10
  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      ImageId: !Ref LatestAmiId
      InstanceType:
        !FindInMap [EnvironmentToInstanceType, !Ref EnvironmentType, InstanceType]
      SecurityGroups: 
        - !Ref 'InboundAccessSecurityGroup'
      KeyName: !Ref 'KeyName'
  InboundAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow inbound tcp on SSH web ports"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.0.0.0/16
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

#Start of the assignment
 WebServerIsolationSecurityGroup:  # New Security Group for Isolation
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for isolated web server"
      VpcId: !Ref VPC
      SecurityGroupIngress: []  # No inbound traffic allowed
      SecurityGroupEgress: []   # No outbound traffic allowed

# Incident Response Playbook Steps:
#
# Step 1: Detect Anomaly
# - Automated monitoring detects anomalous network activity.
#
# Step 2: Verify Anomaly
# - Verify the anomaly and determine if it poses a security threat.
#
# Step 3: Isolate Web Server
# - Update security groups to assign the 'WebServerIsolationSecurityGroup' to the WebServerInstance, isolating it from the network.
#
# Step 4: Collect Forensic Data
# - Collect forensic data from the isolated web server for investigation.
#
# Step 5: Analyze and Remediate
# - Analyze the collected data to determine the root cause and apply necessary remediations.
#
# Step 6: Restore Normal Operations
# - Once the threat is mitigated, revert the security group changes and restore normal operations.

#End of the assignment
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'WebServerInstance'
  URI:
    Description: URL that points to public standard web service
    Value: !Sub http://${WebServerInstance.PublicDnsName}

